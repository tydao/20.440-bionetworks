df
(1-pt(t0, df))*2
t90 = abs(qt(.9/2+.5, df))
t90
t95 = abs(qt(.95/2+.5, df))
t95
xbar <- 91.5
ybar <- 88.3
s1 <- 5.5
s2 <- 7.8
m = 28
n = 31
t0 <- (xbar-ybar) / sqrt(s1^2/m + s2^2/n)
t0
se1.2 <- s1^2/m
se2.2 <- s2^2/n
df <- (se1.2+se2.2)^2 / (se1.2^2/(m-1) + se2.2^2/(n-1))
df
set.seed(1)
population <- rnorm(5, mean=0, sd=1)
tstat = (mean(population)-0)/sqrt(var(population)/5)
tstat
set.seed(1)
T = rep(0,1000)
for(i in 1:1000) {
population <- rnorm(5, mean=0, sd=1)
tstat = (mean(population)-0)/sqrt(var(population)/5)
T[i] = tstat
}
percent = length(which(T > 2))/1000
percent
1-pt(2,df=4)
B=100;
ps = seq(1/(B+1), 1-1/(B+1),len=B)
N = c(5,10,20,50,100,200)
T = rep(0,100)
for(j in 1:length(N)) {
for(i in 1:100) {
population <- rnorm(N[j], mean=0, sd=1)
tstat = (mean(population)-0)/sqrt(var(population)/N[j])
T[i] = tstat
}
PS = qt(ps,df=N[j]-1)
qqplot(T,PS,main=paste("Sample size n = ",N[j]))
abline(0,1)
}
N = c(5,10,20,50,100,200)
N = c(5,10,20,50,100,200)
T = rep(0, length(N))
for(k in 1:length(N)) {
for(i in 1:100) {
pop1 = rnorm(N[k], mean=0, sd=1)
pop2 = rnorm(N[k], mean=0, sd=1)
T[i] = t.test(x=pop1, y=pop2, alternative="less",
mu=0, var.equal=TRUE)$statistic
}
PS = qt(ps,df=N[k]-1)
qqplot(T,PS,main=paste("Sample size n = ",N[k]))
abline(0,1)
}
xbar <- 4358
set.seed(1)
1-pt(2,df=4)
B=100;
ps = seq(1/(B+1), 1-1/(B+1),len=B)
N = c(5,10,20,50,100,200)
T = rep(0,100)
for(j in 1:length(N)) {
for(i in 1:100) {
population <- rnorm(N[j], mean=0, sd=1)
tstat = (mean(population)-0)/sqrt(var(population)/N[j])
T[i] = tstat
}
PS = qt(ps,df=N[j]-1)
qqplot(PS,T,main=paste("Sample size n = ",N[j]))
abline(0,1)
}
N = c(5,10,20,50,100,200)
1-pt(2,df=4)
B=100;
ps = seq(1/(B+1), 1-1/(B+1),len=B)
N = c(5,10,20,50,100,200)
T = rep(0,100)
for(j in 1:length(N)) {
for(i in 1:100) {
population <- rnorm(N[j], mean=0, sd=1)
tstat = (mean(population)-0)/sqrt(var(population)/N[j])
T[i] = tstat
}
PS = qt(ps,df=N[j]-1)
qqplot(PS,T,main=paste("Sample size n = ",N[j]))
abline(0,1)
}
N = c(5,10,20,50,100,200)
set.seed(1)
B=100;
ps = seq(1/(B+1), 1-1/(B+1),len=B)
N = c(5,10,20,50,100,200)
T = rep(0,100)
for(j in 1:length(N)) {
for(i in 1:100) {
population <- rnorm(N[j], mean=0, sd=1)
tstat = (mean(population)-0)/sqrt(var(population)/N[j])
T[i] = tstat
}
PS = qt(ps,df=N[j]-1)
qqplot(PS,T,main=paste("Sample size n = ",N[j]))
abline(0,1)
}
for(j in 1:length(N)) {
for(i in 1:100) {
population <- rnorm(N[j], mean=0, sd=1)
tstat = (mean(population)-0)/sqrt(var(population)/N[j])
T[i] = tstat
}
PS = qt(ps,df=N[j]-1)
qqplot(PS,T,main=paste("Sample size n = ",N[j]))
abline(0,1)
}
N = c(5,10,20,50,100,200)
T = rep(0, length(N))
for(k in 1:length(N)) {
for(i in 1:100) {
pop1 = rnorm(N[k], mean=0, sd=1)
pop2 = rnorm(N[k], mean=0, sd=1)
T[i] = t.test(x=pop1, y=pop2, alternative="less",
mu=0, var.equal=TRUE)$statistic
}
PS = qt(ps,df=N[k]-1)
qqplot(PS,T,main=paste("Sample size n = ",N[k]))
abline(0,1)
}
set.seed(1)
population <- rnorm(5, mean=0, sd=1)
tstat = (mean(population)-0)/sqrt(var(population))
tstat
set.seed(1)
population <- rnorm(5, mean=0, sd=1)
tstat = (mean(population)-0)/sqrt(var(population)/5)
tstat
percent = length(which(T > 2))/1000
percent
set.seed(1)
T = rep(0,1000)
for(i in 1:1000) {
population <- rnorm(5, mean=0, sd=1)
tstat = (mean(population)-0)/sqrt(var(population)/5)
T[i] = tstat
}
percent = length(which(T > 2))/1000
percent
set.seed(1)
T = rep(0,1000)
for(i in 1:1000) {
population <- rnorm(5, mean=0, sd=1)
tstat = (mean(population)-0)/sqrt(var(population)/5)
T[i] = tstat
}
percent = length(which(T > 2))/1000
percent
1-pt(2,df=4)
B=100;
ps = seq(1/(B+1), 1-1/(B+1),len=B)
N = c(5,10,20,50,100,200)
T = rep(0,100)
for(j in 1:length(N)) {
for(i in 1:100) {
population <- rnorm(N[j], mean=0, sd=1)
tstat = (mean(population)-0)/sqrt(var(population)/N[j])
T[i] = tstat
}
PS = qt(ps,df=N[j]-1)
qqplot(PS,T,main=paste("Sample size n = ",N[j]))
abline(0,1)
}
set.seed(1)
1-pt(2,df=4)
B=100;
ps = seq(1/(B+1), 1-1/(B+1),len=B)
N = c(5,10,20,50,100,200)
T = rep(0,100)
for(j in 1:length(N)) {
for(i in 1:100) {
population <- rnorm(N[j], mean=0, sd=1)
tstat = (mean(population)-0)/sqrt(var(population)/N[j])
T[i] = tstat
}
PS = qt(ps,df=N[j]-1)
qqplot(PS,T,main=paste("Sample size n = ",N[j]))
abline(0,1)
}
N = c(5,10,20,50,100,200)
T = rep(0, length(N))
for(k in 1:length(N)) {
for(i in 1:100) {
pop1 = rnorm(N[k], mean=0, sd=1)
pop2 = rnorm(N[k], mean=0, sd=1)
T[i] = t.test(x=pop1, y=pop2, alternative="less",
mu=0, var.equal=TRUE)$statistic
}
PS = qt(ps,df=2*N[k]-2)
qqplot(PS,T,main=paste("Sample size n = ",N[k]))
abline(0,1)
}
xbar <- 4358
N = c(5,10,20,50,100,200)
T = rep(0, length(N))
for(k in 1:length(N)) {
for(i in 1:100) {
pop1 = rnorm(N[k], mean=0, sd=1)
pop2 = rnorm(N[k], mean=0, sd=1)
T[i] = t.test(x=pop1, y=pop2, alternative="less",
mu=0, var.equal=TRUE)$statistic
}
PS = qt(ps,df=2*N[k]-2)
qqplot(PS,T,main=paste("Sample size n = ",N[k]))
abline(0,1)
}
for(k in 1:length(N)) {
for(i in 1:100) {
pop1 = rnorm(N[k], mean=0, sd=1)
pop2 = rnorm(N[k], mean=0, sd=1)
T[i] = t.test(x=pop1, y=pop2, alternative="less",
mu=0, var.equal=TRUE)$statistic
}
PS = qt(ps,df=2*N[k]-2)
qqplot(PS,T,main=paste("Sample size n = ",N[k]))
abline(0,1)
}
sDiff <- 8.887
xBar <- -0.545
nDiff <- 200
# Compute the standard error
seDiff <- sDiff / sqrt(nDiff)
# Compute T statistic
T <- (xBar - 0) / seDiff
df <- nDiff - 1
pVal <- pt(T, df=df)
pVal
obs = c(387.22, 163.04, 407.6, 61.14)
prob = c(0.37, 0.12, 0.45, 0.06)
chisq.test(obs, p=prob)
obs = c(387.22, 163.04, 407.6, 61.14)
prob = c(0.37, 0.12, 0.45, 0.06)
chisq.test(obs, p=prob)
1-pchisq(20.93, df=4)
ANES = c(83,121,193,103)
prob = c(0.18,0.22,0.37,0.23)
chisq.test(ANES, p=prob)
read.csv("https://studio.edx.org/c4x/HarvardX/PH525.1x/asset/assoctest.csv")
read.csv("assoctest.csv")
read.csv("Downloads/assoctest.csv")
test = read.csv("Downloads/assoctest.csv")
table(test)
as.table(test)
test = read.csv("Downloads/assoctest.csv")
as.table(test)
table(values(test))
test
test = read.csv("Downloads/assoctest.csv")
test
table(test)
table(test[1,:])
table(test.allele)
table(test$allele)
test$allele
allele = test$allele
case = test$case
table(allele, case)
case
table(allele, case, row.names(allele,case))
table(allele, case, row.names("allele","case"))
table(allele, row.names("allele","case"))
table(allele, case, row.names=c("allele","case"))
table(allele, case, row.names=c("allele","case"))
table(allele, case)
chisq.test(twowaytable)
twowaytable = table(allele, case)
chisq.test(twowaytable)
test
chisq.test(twowaytable)
fisher.test(twowaytable)
ANES = c(83,121,193,103)
prob = c(0.18,0.22,0.37,0.23)
chisq.test(ANES, p=prob)
tab <- matrix(c(29,54,44,77,62,131,36,67),4,2)
colnames(tab)<-c("Right", "Wrong")
rownames(tab)<-c("Northeast","North Central", "South", "West")
tab
tab <- matrix(c(29,44,62,36,54,77,131,67),4,2)
colnames(tab)<-c("Right", "Wrong")
rownames(tab)<-c("Northeast","North Central", "South", "West")
tab
chisq.test(tab)
test = read.csv("Downloads/assoctest.csv")
allele = test$allele
case = test$case
twowaytable = table(allele, case)
chisq.test(twowaytable)
fisher.test(twowaytable)
test = read.csv("Downloads/assoctest.csv")
allele = test$allele
case = test$case
twowaytable = table(allele, case)
twowaytable
chisq.test(twowaytable)
xy <- matrix(c(.05,.05,0,.05,.1,.2,.1,.35,.1),3,3)
xy
corr(xy)
cov(xy)
x = c(.2,.5,.3)
y = c(.1,.35,.55)
cov(x,y)
var(x)
cov(x,y)
cor(x,y)
pt(-3.43341, df = 170-1)
pt(-3.43341, df = 170-2)
pt(2.228571, df = 23)
(1-pt(2.228571, df = 23))*2
2*pt(-3.43341, df = 170-2)
library(UsingR)
N <- 50
set.seed(1)
index <- sample(n,N)
sampledat <- father.son[index,]
install.packages(UsingR)
install.packages(UsingR)
library(UsingR)
library(UsingR)
install.packages("UsingR")
install.packages("UsingR")
library(UsingR)
install.packages("UsingR")
lm(temperature ~ damaged)
temperature <- c(53,57,58,63,66,67,67,67,68,69,70,70,70,70,72,73,75,75,76,76,78,79,81)
damaged <- c(5,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0)
undamaged <- c(1,5,5,5,6,6,6,6,6,6,5,6,5,6,6,6,6,5,6,6,6,6,6)
lm(temperature ~ damaged)
summary(lm(temperature ~ damaged))
summary(lm(damaged ~ temperature))
damage = c(1,1,1,1,1,1,1,1,1,1,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0
)
temperature = c(53,53,53,53,53,57,58,63,70,70,75,
53,57,57,57,57,57,58,58,58,58,58,63,63,63,63,63,
66,66,66,66,66,66,67,67,67,67,67,67,
67,67,67,67,67,67,67,67,67,67,67,67,
68,68,68,68,68,68,69,69,69,69,69,69,
70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,
72,72,72,72,72,72,73,73,73,73,73,73,
75,75,75,75,75,75,75,75,75,75,75,
76,76,76,76,76,76,76,76,76,76,76,76,
78,78,78,78,78,78,79,79,79,79,79,79,
81,81,81,81,81,81
)
summary(glm(damage ~ temperature))
summary(glm(damage ~ temperature, family="binomial"))
summary(glm(damage ~ temperature, family="binomial"))
x =  [2.410
2.524
2.642
3.163
2.897
4.066
5.038
3.187
3.542
3.935
3.155
3.283
3.260
3.555
3.650
2.688
2.754
3.952
2.903
2.638
2.930
4.570
3.051
2.194
2.765
3.540
2.348
3.655
2.244
3.227
2.245
2.304
2.808
2.491
2.131
2.361
2.239
2.551
2.2465
2.902
3.322
4.197
2.605
2.503
2.112]
x =  (2.410, 2.524,
2.642,
3.163,
2.897,
4.066,
5.038,
3.187,
3.542,
3.935,
3.155,
3.283,
3.260,
3.555,
3.650,
2.688,
2.754,
3.952,
2.903,
2.638,
2.930,
4.570,
3.051,
2.194,
2.765,
3.540,
2.348,
3.655,
2.244,
3.227,
2.245,
2.304,
2.808,
2.491,
2.131,2.361,2.239,2.551,2.2465,2.902,3.32,4.197,2.605,2.503,2.112)
x =  (2.410, 2.524,2.642,3.163,2.897,4.066,5.038,3.187,3.542,3.935,3.155,3.283,3.260,3.555,3.650,2.688,2.754,3.952,2.903,2.638,2.930,4.570,3.051,2.194,2.765,3.540,2.348,3.655,2.244,3.227,2.245,2.304,2.808,2.491,2.131,2.361,2.239,2.551,2.2465,2.902,3.32,4.197,2.605,2.503,2.112)
x = (2.410, 2.524,2.642,3.163,2.897,4.066,5.038,3.187,3.542,3.935,3.155,3.283,3.260,3.555,3.650,2.688,2.754,3.952,2.903,2.638,2.930,4.570,3.051,2.194,2.765,3.540,2.348,3.655,2.244,3.227,2.245,2.304,2.808,2.491,2.131,2.361,2.239,2.551,2.2465,2.902,3.32,4.197,2.605,2.503,2.112)
x = c(2.410, 2.524,2.642,3.163,2.897,4.066,5.038,3.187,3.542,3.935,3.155,3.283,3.260,3.555,3.650,2.688,2.754,3.952,2.903,2.638,2.930,4.570,3.051,2.194,2.765,3.540,2.348,3.655,2.244,3.227,2.245,2.304,2.808,2.491,2.131,2.361,2.239,2.551,2.2465,2.902,3.32,4.197,2.605,2.503,2.112)
t.test(x, y = NULL,
alternative = c("two.sided", "less", "greater"),
mu = 2.2, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, …)
t.test(x, y = NULL,
alternative = c("two.sided"),
mu = 2.2, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, …)
x = c(2.410, 2.524,2.642,3.163,2.897,4.066,5.038,3.187,3.542,3.935,3.155,3.283,3.260,3.555,3.650,2.688,2.754,3.952,2.903,2.638,2.930,4.570,3.051,2.194,2.765,3.540,2.348,3.655,2.244,3.227,2.245,2.304,2.808,2.491,2.131,2.361,2.239,2.551,2.2465,2.902,3.32,4.197,2.605,2.503,2.112)
t.test(x, y = NULL,
alternative = c("two.sided"),
mu = 2.2, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, …)
x = c(2.410, 2.524,2.642,3.163,2.897,4.066,5.038,3.187,3.542,3.935,3.155,3.283,3.260,3.555,3.650,2.688,2.754,3.952,2.903,2.638,2.930,4.570,3.051,2.194,2.765,3.540,2.348,3.655,2.244,3.227,2.245,2.304,2.808,2.491,2.131,2.361,2.239,2.551,2.2465,2.902,3.32,4.197,2.605,2.503,2.112)
t.test(x, y = NULL,
alternative = c("two.sided"),
mu = 2.2, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, …)
t.test(x, y = NULL,
alternative = c("two.sided"),
mu = 2.2, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
x = c(2.410, 2.524,2.642,3.163,2.897,4.066,5.038,3.187,3.542,3.935,3.155,3.283,3.260,3.555,3.650,2.688,2.754,3.952,2.903,2.638,2.930,4.570,3.051,2.194,2.765,3.540,2.348,3.655,2.244,3.227,2.245,2.304,2.808,2.491,2.131,2.361,2.239,2.551,2.2465,2.902,3.32,4.197,2.605,2.503,2.112)
t.test(x, y = NULL,
alternative = c("two.sided"),
mu = 2.2, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
install.packages('devtools')
install.packages(c("boot", "class", "cluster", "codetools", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
library(Seurat)
# Read in the data
raw_counts <- read.csv('../Data/aaq0681_TableS5.csv')
ls
ls
cd
dn = "/Users/Dao/Documents/MIT Grad/Classes/20.440/Project"
setwd(dn)
library(Seurat)
# Read in the data
raw_counts <- read.csv('Data/aaq0681_TableS5.csv')
#colnames(raw_counts) <- raw_counts[1, ]
#raw_counts <- raw_counts[-1, ]
rownames(raw_counts) <- raw_counts[, 1]
raw_counts <- raw_counts[, -1]
raw_counts[c('ident', 'orig.ident', 'tSNE_1', 'tSNE_2', 'nGene')] <- NULL
SO <- CreateSeuratObject(t(raw_counts))
# Prepare Seurat Data
SO <- NormalizeData(SO)
all.genes <- rownames(SO)
SO <- FindVariableFeatures(object = SO)
SO <- ScaleData(SO, features = all.genes)
SO <- RunPCA(SO, features = VariableFeatures(object = SO))
View(df)
# Run Clustering and Reduction
SO <- FindNeighbors(SO, dims = 1:10)
SO <- FindClusters(SO, reduction.type = "umap", resolution = 0.051)
# Plot Graph
SO <- RunUMAP(SO, dims = 1:10)
DimPlot(SO, reduction = "umap", label = TRUE)
FeaturePlot(SO, features=c("TNMD", "ASPN", "SPARC", "HMGN2"))
